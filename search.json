[{"path":[]},{"path":"https://poissonconsulting.github.io/dbflobr/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to dbflobr","title":"Contributing to dbflobr","text":"outlines propose change dbflobr.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to dbflobr","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to dbflobr","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to dbflobr","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to dbflobr","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to dbflobr","text":"Please note dbflobr project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2019 Poisson Consulting Ltd. Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with dbflobr","title":"Getting help with dbflobr","text":"Thanks using dbflobr! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/SUPPORT.html","id":"make-sure-its-new","dir":"","previous_headings":"","what":"Make sure its new","title":"Getting help with dbflobr","text":"opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with dbflobr","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/articles/vignette.html","id":"batch-exporting-and-importing-flobs-for-an-sqlite-database","dir":"Articles","previous_headings":"","what":"Batch exporting and importing flobs for an sqlite database","title":"Batching flobs","text":"creating new version database, can time consuming re-populate flobs individually using slobr app. dbflobr provides functionality carry task automatically minimal user input, provides useful console output summarize results. Lets assume database containing one tables Blob columns.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/articles/vignette.html","id":"saving-flobs-from-a-database","dir":"Articles","previous_headings":"Batch exporting and importing flobs for an sqlite database","what":"Saving flobs from a database","title":"Batching flobs","text":"Create connection database run function dbflobr::save_all_flobs() providing database connection file path chosen storing flobs. dbflobr automatically use table’s primary key file name saved flob. example, ‘DateVisit’ unique primary key  Flobs stored sub-directories named tables columns originated . preserves information necessary repopulate new version database correct locations.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/articles/vignette.html","id":"importing-flobs-back-into-a-database","dir":"Articles","previous_headings":"Batch exporting and importing flobs for an sqlite database","what":"Importing flobs back into a database","title":"Batching flobs","text":"new version database created, run function dbflobr::import_all_flobs(), providing connection new database file path directory flobs stored. dbflobr repopulate database using file directory names import flob correct cell.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/articles/vignette.html","id":"working-with-individual-tables-and-columns","dir":"Articles","previous_headings":"Batch exporting and importing flobs for an sqlite database","what":"Working with individual tables and columns","title":"Batching flobs","text":"want export import flobs particular tables columns can use dbflobr::save_flobs() dbflobr::import_flobs() respectively, providing additional arguments ‘table_name’ ‘column_name’ needed.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sebastian Dalgarno. Author. Joe Thorley. Author. Evan Amies-Galonski. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dalgarno S, Thorley J, Amies-Galonski E (2025). dbflobr: Read Write Files SQLite Databases. R package version 0.2.2, https://poissonconsulting.github.io/dbflobr/, https://github.com/poissonconsulting/dbflobr.","code":"@Manual{,   title = {dbflobr: Read and Write Files to SQLite Databases},   author = {Sebastian Dalgarno and Joe Thorley and Evan Amies-Galonski},   year = {2025},   note = {R package version 0.2.2, https://poissonconsulting.github.io/dbflobr/},   url = {https://github.com/poissonconsulting/dbflobr}, }"},{"path":"https://poissonconsulting.github.io/dbflobr/index.html","id":"dbflobr-","dir":"","previous_headings":"","what":"Read and Write Files to SQLite Databases","title":"Read and Write Files to SQLite Databases","text":"dbflobr reads writes files SQLite databases flobs. flob blob preserves file extension.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read and Write Files to SQLite Databases","text":"install latest release CRAN install developmental version GitHub","code":"install.packages(\"dbflobr\") # install.packages(\"remotes\") remotes::install_github(\"poissonconsulting/dbflobr\")"},{"path":"https://poissonconsulting.github.io/dbflobr/index.html","id":"demonstration","dir":"","previous_headings":"","what":"Demonstration","title":"Read and Write Files to SQLite Databases","text":"","code":"library(dbflobr)  # convert a file to flob using flobr flob <- flobr::flob(system.file(\"extdata\", \"flobr.pdf\", package = \"flobr\")) str(flob) #> List of 1 #>  $ /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/flobr/extdata/flobr.pdf: raw [1:133851] 58 0a 00 00 ... #>  - attr(*, \"class\")= chr [1:2] \"flob\" \"blob\"  # create a SQLite database connection  conn <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\")  # create a table 'Table1' of data DBI::dbWriteTable(conn, \"Table1\", data.frame(IntColumn = c(1L, 2L)))  DBI::dbReadTable(conn, \"Table1\") #>   IntColumn #> 1         1 #> 2         2  # specify which row to add the flob to by providing a key  key <- data.frame(IntColumn = 2L)  # write the flob to the database in column 'BlobColumn' write_flob(flob, \"BlobColumn\", \"Table1\", key, conn, exists = FALSE)  DBI::dbReadTable(conn, \"Table1\") #>   IntColumn      BlobColumn #> 1         1            <NA> #> 2         2 blob[133.85 kB]  # read the flob flob2 <- read_flob(\"BlobColumn\", \"Table1\", key, conn) str(flob2) #> List of 1 #>  $ BlobColumn: raw [1:133851] 58 0a 00 00 ... #>  - attr(*, \"class\")= chr [1:2] \"flob\" \"blob\"  # delete the flob delete_flob(\"BlobColumn\", \"Table1\", key, conn)  DBI::dbReadTable(conn, \"Table1\") #>   IntColumn BlobColumn #> 1         1       <NA> #> 2         2       <NA>  # close the connection DBI::dbDisconnect(conn)"},{"path":"https://poissonconsulting.github.io/dbflobr/index.html","id":"inspiration","dir":"","previous_headings":"","what":"Inspiration","title":"Read and Write Files to SQLite Databases","text":"blob flobr","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/index.html","id":"contribution","dir":"","previous_headings":"","what":"Contribution","title":"Read and Write Files to SQLite Databases","text":"Please report issues. Pull requests always welcome.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Read and Write Files to SQLite Databases","text":"Please note dbflobr project released Contributor Code Conduct. contributing project, agree abide terms","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/pull-request.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"NA","text":"Describe changes detail","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/pull-request.html","id":"related-issue","dir":"","previous_headings":"","what":"Related Issue","title":"NA","text":"pull request closes issue please include example “fix #4” just relates issue simply include example “#4”.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/add_blob_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Add blob column — add_blob_column","title":"Add blob column — add_blob_column","text":"Add named empty blob column SQLite database","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/add_blob_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add blob column — add_blob_column","text":"","code":"add_blob_column(column_name, table_name, conn)"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/add_blob_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add blob column — add_blob_column","text":"column_name string name BLOB column. table_name string name existing table. conn SQLite connection object.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/add_blob_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add blob column — add_blob_column","text":"Modified SQLite database.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/add_blob_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add blob column — add_blob_column","text":"","code":"conn <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\") DBI::dbWriteTable(conn, \"Table1\", data.frame(IntColumn = c(1L, 2L))) DBI::dbReadTable(conn, \"Table1\") #>   IntColumn #> 1         1 #> 2         2 add_blob_column(\"BlobColumn\", \"Table1\", conn) DBI::dbReadTable(conn, \"Table1\") #>   IntColumn BlobColumn #> 1         1       <NA> #> 2         2       <NA> DBI::dbDisconnect(conn)"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/dbflobr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"dbflobr: Read and Write Files to SQLite Databases — dbflobr-package","title":"dbflobr: Read and Write Files to SQLite Databases — dbflobr-package","text":"Reads writes files SQLite databases https://www.sqlite.org/index.html flobs (flob blob preserves file extension).","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/dbflobr/reference/dbflobr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"dbflobr: Read and Write Files to SQLite Databases — dbflobr-package","text":"Maintainer: Evan Amies-Galonski evan@poissonconsulting.ca (ORCID) Authors: Sebastian Dalgarno seb@northbeachconsulting.ca (ORCID) Joe Thorley joe@poissonconsulting.ca (ORCID) contributors: Poisson Consulting [copyright holder, funder]","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/delete_flob.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete flob — delete_flob","title":"Delete flob — delete_flob","text":"Delete flob SQLite database.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/delete_flob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete flob — delete_flob","text":"","code":"delete_flob(column_name, table_name, key, conn)"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/delete_flob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete flob — delete_flob","text":"column_name string name BLOB column. table_name string name existing table. key data.frame whose columns values used filter table single row (combination column_name argument used target single cell within table modify). conn SQLite connection object.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/delete_flob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete flob — delete_flob","text":"invisible copy deleted flob.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/delete_flob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Delete flob — delete_flob","text":"","code":"flob <- flobr::flob_obj conn <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\") DBI::dbWriteTable(conn, \"Table1\", data.frame(IntColumn = c(1L, 2L))) key <- data.frame(IntColumn = 2L) write_flob(flob, \"BlobColumn\", \"Table1\", key, conn, exists = FALSE) DBI::dbReadTable(conn, \"Table1\") #>   IntColumn      BlobColumn #> 1         1            <NA> #> 2         2 blob[133.85 kB] delete_flob(\"BlobColumn\", \"Table1\", key, conn) DBI::dbReadTable(conn, \"Table1\") #>   IntColumn BlobColumn #> 1         1       <NA> #> 2         2       <NA> DBI::dbDisconnect(conn)"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/import_all_flobs.html","id":null,"dir":"Reference","previous_headings":"","what":"Import all flobs. — import_all_flobs","title":"Import all flobs. — import_all_flobs","text":"Import flobr::flob()s SQLite database directory. Table column names matched directory names within main directory. Values file names matched table primary key determine write flob.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/import_all_flobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import all flobs. — import_all_flobs","text":"","code":"import_all_flobs(   conn,   dir = \".\",   sep = \"_-_\",   pattern = \".*\",   sub = FALSE,   exists = FALSE,   replace = FALSE )"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/import_all_flobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import all flobs. — import_all_flobs","text":"conn SQLite connection object. dir string path directory import files . Files need within nested folders like 'table1/column1/.csv'. structure created automatically save_all_flobs() function used. sep string separator values file names. pattern regular expression specifying pattern file names must match. sub logical scalar specifying whether import flobs based filename (sub = FALSE) name subdirectory (sub = TRUE) must contain 1 file. sub = NA replace = TRUE names subdirectories used irrespective whether include files existing flobs deleted corresponding subdirectory empty. sub = TRUE sub = NA recursion just one subfolder deep. exists logical scalar specifying whether column must (TRUE) (FALSE) already exist whether matter (NA). FALSE, new BLOB column created. replace flag indicating whether replace existing flobs (TRUE) (FALSE).","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/import_all_flobs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import all flobs. — import_all_flobs","text":"invisible named list indicating directory path, file names whether files successfully written database.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/import_all_flobs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import all flobs. — import_all_flobs","text":"","code":"conn <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\") DBI::dbGetQuery(conn, \"CREATE TABLE Table1 (CharColumn TEXT PRIMARY KEY NOT NULL)\") #> Warning: `dbGetQuery()`, `dbSendQuery()` and `dbFetch()` should only be used with `SELECT` queries. Did you mean `dbExecute()`, `dbSendStatement()` or `dbGetRowsAffected()`? #> data frame with 0 columns and 0 rows DBI::dbWriteTable(conn, \"Table1\", data.frame(CharColumn = c(\"a\", \"b\")), append = TRUE) flob <- flobr::flob_obj write_flob(flob, \"BlobColumn\", \"Table1\", data.frame(CharColumn = \"a\"), conn) dir <- file.path(tempdir(), \"import_all\") save_all_flobs(conn = conn, dir = dir) #> Table name: \"Table1\" #> Column name: \"BlobColumn\" #> Saving files to /tmp/RtmpkSEsOh/import_all/Table1/BlobColumn #> ✔ Row 1: file flobr.pdf renamed to a.pdf #> ✖ Row 2: no file found #>  import_all_flobs(conn, dir, exists = TRUE, replace = TRUE) #> Table name: \"Table1\" #> Column name: \"BlobColumn\" #> Writing files to database #> ✔ File 1: a.pdf written to database #>  DBI::dbDisconnect(conn)"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/import_flobs.html","id":null,"dir":"Reference","previous_headings":"","what":"Import flobs. — import_flobs","title":"Import flobs. — import_flobs","text":"Import flobr::flob()s SQLite database column directory. Values file name matched table primary key determine write flob.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/import_flobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import flobs. — import_flobs","text":"","code":"import_flobs(   column_name,   table_name,   conn,   dir = \".\",   sep = \"_-_\",   pattern = \".*\",   sub = FALSE,   exists = FALSE,   recursive = FALSE,   replace = FALSE )"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/import_flobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import flobs. — import_flobs","text":"column_name string name BLOB column. table_name string name existing table. conn SQLite connection object. dir string path directory import files . sep string separator values file names. pattern regular expression specifying pattern file names must match. sub logical scalar specifying whether import flobs based filename (sub = FALSE) name subdirectory (sub = TRUE) must contain 1 file. sub = NA replace = TRUE names subdirectories used irrespective whether include files existing flobs deleted corresponding subdirectory empty. sub = TRUE sub = NA recursion just one subfolder deep. exists logical scalar specifying whether column must (TRUE) (FALSE) already exist whether matter (NA). FALSE, new BLOB column created. recursive flag indicating whether recurse file directory (TRUE) (FALSE). replace flag indicating whether replace existing flobs (TRUE) (FALSE).","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/import_flobs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import flobs. — import_flobs","text":"invisible named vector indicating file name whether file successfully written database.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/import_flobs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import flobs. — import_flobs","text":"","code":"conn <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\") DBI::dbGetQuery(conn, \"CREATE TABLE Table1 (CharColumn TEXT PRIMARY KEY NOT NULL)\") #> Warning: `dbGetQuery()`, `dbSendQuery()` and `dbFetch()` should only be used with `SELECT` queries. Did you mean `dbExecute()`, `dbSendStatement()` or `dbGetRowsAffected()`? #> data frame with 0 columns and 0 rows DBI::dbWriteTable(conn, \"Table1\", data.frame(CharColumn = c(\"a\", \"b\")), append = TRUE) key <- data.frame(CharColumn = \"a\", stringsAsFactors = FALSE)[0, , drop = FALSE] dir <- tempdir() write.csv(key, file.path(dir, \"a.csv\")) import_flobs(\"BlobColumn\", \"Table1\", conn, dir) #> Writing files to database #> ✔ File 1: a.csv written to database #> ✖ File 2: can't write file1c994b09a26 to database #> ✖ File 3: can't write file1c9956d01c2 to database DBI::dbDisconnect(conn)"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/read_flob.html","id":null,"dir":"Reference","previous_headings":"","what":"Read flob — read_flob","title":"Read flob — read_flob","text":"Read flobr::flob() SQLite database.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/read_flob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read flob — read_flob","text":"","code":"read_flob(column_name, table_name, key, conn, slob = FALSE)"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/read_flob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read flob — read_flob","text":"column_name string name BLOB column. table_name string name existing table. key data.frame whose columns values used filter table single row (combination column_name argument used target single cell within table modify). conn SQLite connection object. slob logical scalar specifying whether process slobs (serialized blobs) instead flobs. NA, function adapt accordingly.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/read_flob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read flob — read_flob","text":"flob blob.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/read_flob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read flob — read_flob","text":"","code":"flob <- flobr::flob_obj conn <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\") DBI::dbWriteTable(conn, \"Table1\", data.frame(IntColumn = c(1L, 2L))) key <- data.frame(IntColumn = 2L) write_flob(flob, \"BlobColumn\", \"Table1\", key, conn, exists = FALSE) read_flob(\"BlobColumn\", \"Table1\", key, conn) DBI::dbDisconnect(conn)"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/save_all_flobs.html","id":null,"dir":"Reference","previous_headings":"","what":"Save all flobs. — save_all_flobs","title":"Save all flobs. — save_all_flobs","text":"Rename flobr::flob()s SQLite database save directory.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/save_all_flobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save all flobs. — save_all_flobs","text":"","code":"save_all_flobs(   table_name = NULL,   conn,   dir = \".\",   sep = \"_-_\",   sub = FALSE,   replace = FALSE,   geometry = FALSE )"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/save_all_flobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save all flobs. — save_all_flobs","text":"table_name vector character strings indicating names tables save flobs . default tables included. conn SQLite connection object. dir string path directory save files . sep string separator used construct file names values. sub logical scalar specifying whether save existing files subdirectory name (sub = TRUE) possible files subdirectory name (sub = NA) nest files within subdirectory (sub = FALSE). replace flag specifying whether replace existing files. sub = TRUE (sub = NA) replace = TRUE existing files within subdirectory deleted. geometry flag specifying whether search columns named geometry flobs.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/save_all_flobs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save all flobs. — save_all_flobs","text":"invisible named list named vectors file names new file names saved.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/save_all_flobs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save all flobs. — save_all_flobs","text":"","code":"flob <- flobr::flob_obj conn <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\") DBI::dbGetQuery(conn, \"CREATE TABLE Table1 (IntColumn INTEGER PRIMARY KEY NOT NULL)\") #> Warning: `dbGetQuery()`, `dbSendQuery()` and `dbFetch()` should only be used with `SELECT` queries. Did you mean `dbExecute()`, `dbSendStatement()` or `dbGetRowsAffected()`? #> data frame with 0 columns and 0 rows DBI::dbWriteTable(conn, \"Table1\", data.frame(IntColumn = c(1L, 2L)), append = TRUE) key <- data.frame(IntColumn = 2L) write_flob(flob, \"BlobColumn\", \"Table1\", key, conn, exists = FALSE) dir <- tempdir() save_all_flobs(conn = conn, dir = dir) #> Table name: \"Table1\" #> Column name: \"BlobColumn\" #> Saving files to /tmp/RtmpkSEsOh/Table1/BlobColumn #> ✖ Row 1: no file found #> ✔ Row 2: file flobr.pdf renamed to 2.pdf #>  DBI::dbDisconnect(conn)"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/save_flobs.html","id":null,"dir":"Reference","previous_headings":"","what":"Save flobs. — save_flobs","title":"Save flobs. — save_flobs","text":"Rename flobr::flob()s SQLite database BLOB column save directory.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/save_flobs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save flobs. — save_flobs","text":"","code":"save_flobs(   column_name,   table_name,   conn,   dir = \".\",   sep = \"_-_\",   sub = FALSE,   replace = FALSE,   slob_ext = NULL )"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/save_flobs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save flobs. — save_flobs","text":"column_name string name BLOB column. table_name string name existing table. conn SQLite connection object. dir string path directory save files . sep string separator used construct file names values. sub logical scalar specifying whether save existing files subdirectory name (sub = TRUE) possible files subdirectory name (sub = NA) nest files within subdirectory (sub = FALSE). replace flag specifying whether replace existing files. sub = TRUE (sub = NA) replace = TRUE existing files within subdirectory deleted. slob_ext string file extension use slobs (serialized blobs) encountered. slob_ext = NULL slobs ignored.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/save_flobs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save flobs. — save_flobs","text":"invisible named vector file names new file names saved.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/save_flobs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save flobs. — save_flobs","text":"","code":"flob <- flobr::flob_obj conn <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\") DBI::dbGetQuery(conn, \"CREATE TABLE Table1 (IntColumn INTEGER PRIMARY KEY NOT NULL)\") #> Warning: `dbGetQuery()`, `dbSendQuery()` and `dbFetch()` should only be used with `SELECT` queries. Did you mean `dbExecute()`, `dbSendStatement()` or `dbGetRowsAffected()`? #> data frame with 0 columns and 0 rows DBI::dbWriteTable(conn, \"Table1\", data.frame(IntColumn = c(1L, 2L)), append = TRUE) key <- data.frame(IntColumn = 2L) write_flob(flob, \"BlobColumn\", \"Table1\", key, conn, exists = FALSE) dir <- tempdir() save_flobs(\"BlobColumn\", \"Table1\", conn, dir) #> Saving files to /tmp/RtmpkSEsOh #> ✖ Row 1: no file found #> ✔ Row 2: file flobr.pdf renamed to 2.pdf DBI::dbDisconnect(conn)"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/write_flob.html","id":null,"dir":"Reference","previous_headings":"","what":"Write flob — write_flob","title":"Write flob — write_flob","text":"Write flobr::flob() SQLite database.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/write_flob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write flob — write_flob","text":"","code":"write_flob(flob, column_name, table_name, key, conn, exists = NA)"},{"path":"https://poissonconsulting.github.io/dbflobr/reference/write_flob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write flob — write_flob","text":"flob flob. column_name string name BLOB column. table_name string name existing table. key data.frame whose columns values used filter table single row (combination column_name argument used target single cell within table modify). conn SQLite connection object. exists logical scalar specifying whether column must (TRUE) (FALSE) already exist whether matter (NA). FALSE, new BLOB column created.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/write_flob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write flob — write_flob","text":"invisible copy flob.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/reference/write_flob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write flob — write_flob","text":"","code":"flob <- flobr::flob_obj conn <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\") DBI::dbWriteTable(conn, \"Table1\", data.frame(IntColumn = c(1L, 2L))) DBI::dbReadTable(conn, \"Table1\") #>   IntColumn #> 1         1 #> 2         2 key <- data.frame(IntColumn = 2L) write_flob(flob, \"BlobColumn\", \"Table1\", key, conn, exists = FALSE) DBI::dbReadTable(conn, \"Table1\") #>   IntColumn      BlobColumn #> 1         1            <NA> #> 2         2 blob[133.85 kB] DBI::dbDisconnect(conn)"},{"path":"https://poissonconsulting.github.io/dbflobr/news/index.html","id":"dbflobr-022","dir":"Changelog","previous_headings":"","what":"dbflobr 0.2.2","title":"dbflobr 0.2.2","text":"CRAN release: 2022-08-19 Internal changes .","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/news/index.html","id":"dbflobr-021","dir":"Changelog","previous_headings":"","what":"dbflobr 0.2.1","title":"dbflobr 0.2.1","text":"CRAN release: 2021-10-30 Change maintainer","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/news/index.html","id":"dbflobr-0209000","dir":"Changelog","previous_headings":"","what":"dbflobr 0.2.0.9000","title":"dbflobr 0.2.0.9000","text":"Added blob = FALSE argument read_flob() specify whether process blobs instead flobs. Added blob_ext = NULL argument save_flobs() specify file extension use blobs encountered.","code":""},{"path":[]},{"path":"https://poissonconsulting.github.io/dbflobr/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"dbflobr 0.2.0","text":"Added sub = FALSE sub = FALSE argument import_flobs(), import_all_flobs(), save_flobs() save_all_flobs() import save subdirectories name primary key. feature means rather renaming files users import can use save functions create subdirectories primary key(s) drag file correctly named subdirectory import. Added pattern = \".*\" argument import_flobs() import_all_flobs() match file names. Added replace = FALSE argument save_flobs() save_all_flobs() specify whether replace existing files. Added geometry = FALSE argument save_all_flobs() ignore columns named geometry default. import_flobs() import_all_flobs() now check directory exists.","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/news/index.html","id":"dbflobr-010","dir":"Changelog","previous_headings":"","what":"dbflobr 0.1.0","title":"dbflobr 0.1.0","text":"CRAN release: 2020-05-13 Added save_flobs, save_all_flobs, import_flobs import_all_flobs functions Replaced checkr package chk upgrade argument checking testing","code":""},{"path":"https://poissonconsulting.github.io/dbflobr/news/index.html","id":"dbflobr-001","dir":"Changelog","previous_headings":"","what":"dbflobr 0.0.1","title":"dbflobr 0.0.1","text":"CRAN release: 2019-08-24 Initial Release","code":""}]
